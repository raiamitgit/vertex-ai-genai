package com.example.vertexaisearch;

public class SearchConfig {

    private final String projectId;
    private final String locationId;
    private final String engineId;
    private final String serviceAccountKeyPath;
    private final String pscEndpoint; // e.g., "10.1.2.3:443" or "psc-dns.internal:443"

    public SearchConfig(String projectId, String locationId, String engineId, String serviceAccountKeyPath, String pscEndpoint) {
        if (projectId == null || projectId.trim().isEmpty()) {
            throw new IllegalArgumentException("Project ID cannot be null or empty.");
        }
        if (locationId == null || locationId.trim().isEmpty()) {
            throw new IllegalArgumentException("Location ID cannot be null or empty.");
        }
        if (engineId == null || engineId.trim().isEmpty()) {
            throw new IllegalArgumentException("Engine ID cannot be null or empty.");
        }
        if (serviceAccountKeyPath == null || serviceAccountKeyPath.trim().isEmpty()) {
            throw new IllegalArgumentException("Service Account Key Path cannot be null or empty.");
        }
        if (pscEndpoint == null || pscEndpoint.trim().isEmpty() || !pscEndpoint.contains(":")) {
            throw new IllegalArgumentException("PSC Endpoint must be in the format 'host:port' and cannot be null or empty.");
        }

        this.projectId = projectId;
        this.locationId = locationId;
        this.engineId = engineId;
        this.serviceAccountKeyPath = serviceAccountKeyPath;
        this.pscEndpoint = pscEndpoint;
    }

    public String getProjectId() {
        return projectId;
    }

    public String getLocationId() {
        return locationId;
    }

    public String getEngineId() {
        return engineId;
    }

    public String getServiceAccountKeyPath() {
        return serviceAccountKeyPath;
    }

    public String getPscEndpoint() {
        return pscEndpoint;
    }

    /**
     * Constructs the full serving config resource name.
     * Format: projects/{project}/locations/{location}/collections/default_collection/engines/{engine_id}/servingConfigs/default_config
     * Note: Adjust 'default_collection' and 'default_config' if you use custom names.
     *
     * @return The serving config resource name string.
     */
    public String getServingConfigName() {
        // IMPORTANT: Verify this format matches your setup in the Cloud Console.
        // It might be /dataStores/{data_store_id}/ instead of /engines/{engine_id}/
        // depending on how you query.
         return String.format(
            "projects/%s/locations/%s/collections/default_collection/engines/%s/servingConfigs/default_config",
            projectId, locationId, engineId);

         // --- OR if querying a Data Store directly ---
         // return String.format(
         //    "projects/%s/locations/%s/collections/default_collection/dataStores/%s/servingConfigs/default_config",
         //    projectId, locationId, engineId); // Use Data Store ID for engineId in this case
    }

    @Override
    public String toString() {
        return "SearchConfig{" +
               "projectId='" + projectId + '\'' +
               ", locationId='" + locationId + '\'' +
               ", engineId='" + engineId + '\'' +
               ", serviceAccountKeyPath='" + serviceAccountKeyPath + '\'' +
               ", pscEndpoint='" + pscEndpoint + '\'' +
               ", servingConfigName='" + getServingConfigName() + '\'' +
               '}';
    }
}